[common]
# Prefix for store all internal carbon-clickhouse graphs. Supported macroses: {host}
metric-prefix = "{{ cch_common_metric_prefix }}"
# Endpoint for store internal carbon metrics. Valid values: "" or "local", "tcp://host:port", "udp://host:port"
metric-endpoint = "{{ cch_common_metric_endpoint }}"
# Interval of storing internal metrics. Like CARBON_METRIC_INTERVAL
metric-interval = "{{ cch_common_metric_interval }}"
# GOMAXPROCS
max-cpu = {{ cch_common_max_cpu }}

[logging]
# "stderr", "stdout" can be used as file name
file = "{{ cch_logging_file }}"
# Logging error level. Valid values: "debug", "info", "warn" "error"
level = "{{ cch_logging_level }}"

[data]
# Folder for buffering received data
path = "{{ cch_data_path }}"
# Rotate (and upload) file interval.
# Minimize chunk-interval for minimize lag between point receive and store
chunk-interval = "{{ cch_data_chunk_interval }}"
# Auto-increase chunk interval if the number of unprocessed files is grown
# Sample, set chunk interval to 10 if unhandled files count >= 5 and set to 60s if unhandled files count >= 20:
# chunk-auto-interval = "5:10s,20:60s"
chunk-auto-interval = "{{ cch_data_chunk_auto_interval }}"

[upload.graphite]
type = "{{ cch_upload_graphite_type }}"
table = "{{ cch_upload_graphite_table }}"
threads = {{ cch_upload_graphite_threads }}
url = "{{ cch_db_scheme + '://' + cch_db_user + ':' + cch_db_password + '@' + cch_db_host + ':' + cch_db_port + '/?database=' + cch_db_name }}"
timeout = "{{ cch_upload_graphite_timeout }}"
# save zero value to Timestamp column (for point and posts-reverse tables)
zero-timestamp = {{ cch_upload_graphite_zero_timestamp | bool | lower }}

[upload.graphite_tree]
type = "{{ cch_upload_graphite_tree_type }}"
table = "{{ cch_upload_graphite_tree_table }}"
date = "{{ cch_upload_graphite_tree_date }}"
threads = {{ cch_upload_graphite_tree_threads }}
url = "{{ cch_db_scheme + '://' + cch_db_user + ':' + cch_db_password + '@' + cch_db_host + ':' + cch_db_port + '/?database=' + cch_db_name }}"
timeout = "{{ cch_upload_graphite_tree_timeout }}"
cache-ttl = "{{ cch_upload_graphite_tree_cache_ttl }}"

# # You can define additional upload destinations of any supported type:
# # - points
# # - tree
# # - series (is described below)
# # - tagged (is described below)
# # - points-reverse (same scheme as points, but path 'a1.b2.c3' stored as 'c3.b2.a1')
# # - series-reverse (same scheme as series, but path 'a1.b2.c3' stored as 'c3.b2.a1')

# # Extra table with daily series list
#
# # CREATE TABLE graphite_series (
# #   Date Date,
# #   Level UInt32,
# #   Path String,
# #   Deleted UInt8,
# #   Version UInt32
# # ) ENGINE = ReplacingMergeTree(Date, (Level, Path, Date), 8192, Version);
# [upload.graphite_series]
# type = "series"
# table = "graphite_series"
# threads = 1
# url = "http://localhost:8123/"
# timeout = "1m0s"
# cache-ttl = "12h0m0s"

# # Extra table which can be used as index for tagged series
#
# # CREATE TABLE graphite_tagged (
# #   Date Date,
# #   Tag1 String,
# #   Path String,
# #   Tags Array(String),
# #   Version UInt32,
# #   Deleted UInt8
# # ) ENGINE = ReplacingMergeTree(Date, (Tag1, Path, Date), 8192, Version);
# [upload.graphite_tagged]
# type = "tagged"
# table = "graphite_tagged"
# threads = 1
# url = "http://localhost:8123/"
# timeout = "1m0s"
# cache-ttl = "12h0m0s"

[udp]
listen = "{{ cch_udp_listen }}"
enabled = {{ cch_udp_enabled | bool | lower }}
# drop received point if timestamp > now + value. 0 - don't drop anything
drop-future = "{{ cch_udp_drop_future }}"
# drop received point if timestamp < now - value. 0 - don't drop anything
drop-past = "{{ cch_udp_drop_past }}"

[tcp]
listen = "{{ cch_tcp_listen }}"
enabled = {{ cch_tcp_enabled | bool | lower  }}
drop-future = "{{ cch_tcp_drop_future }}"
drop-past = "{{ cch_tcp_drop_past }}"

[pickle]
listen = "{{ cch_pickle_listen }}"
enabled = {{ cch_pickle_enabled | bool | lower }}
drop-future = "{{ cch_pickle_drop_future }}"
drop-past = "{{ cch_pickle_drop_past }}"

# https://github.com/lomik/carbon-clickhouse/blob/master/grpc/carbon.proto
[grpc]
listen = "{{ cch_grpc_listen }}"
enabled = {{ cch_grpc_enabled | bool | lower }}
drop-future = "{{ cch_grpc_drop_future }}"
drop-past = "{{ cch_grpc_drop_past }}"

[prometheus]
listen = "{{ cch_prometheus_listen }}"
enabled = {{ cch_prometheus_enabled | bool | lower }}
drop-future = "{{ cch_prometheus_drop_future }}"
drop-past = "{{ cch_prometheus_drop_past }}"

[telegraf_http_json]
listen = "{{ cch_telegraf_http_json_listen }}"
enabled = {{ cch_telegraf_http_json_enabled | bool | lower }}
drop-future = "{{ cch_telegraf_http_json_drop_future }}"
drop-past = "{{ cch_telegraf_http_json_drop_past }}"

# Golang pprof + some extra locations
#
# Last 1000 points dropped by "drop-future" and "drop-past" rules:
# /debug/receive/tcp/dropped/
# /debug/receive/udp/dropped/
# /debug/receive/pickle/dropped/
# /debug/receive/grpc/dropped/
# /debug/receive/prometheus/dropped/
# /debug/receive/telegraf_http_json/dropped/
[pprof]
listen = "{{ cch_pprof_listen }}"
enabled = {{ cch_pprof_enabled | bool | lower }}
